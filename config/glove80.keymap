/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
//#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
//#include <dt-bindings/zmk/outputs.h>
//#include <dt-bindings/zmk/rgb.h>

#include "../../zmk-helpers/helper.h"
#include "../../zmk-helpers/keypos_def/keypos_glv80.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5


// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

ZMK_BEHAVIOR(hrm, hold_tap,
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <125>;
bindings = <&kp>, <&kp>;
)


ZMK_LAYER(default_layer, &trans      &trans  &trans  &trans  &trans                                                                                  &trans  &trans     &trans   &trans    &trans
&trans      &trans  &trans  &trans  &trans  &trans                                                               &trans  &trans  &trans     &trans   &trans       &trans
&kp TAB     &kp Q   &kp W   &kp F   &kp P   &kp B                                                                &kp J   &kp L   &kp U      &kp Y    &kp SEMI     &kp GRAVE
&caps_word  &hrm LGUI A &hrm LALT R &hrm LCTRL S &hrm LSHIFT T &kp G                &kp M &hrm RSHIFT N &hrm RCTRL E &hrm RALT I    &hrm RGUI O     &kp SQT
&kp ESC     &kp Z   &kp X   &kp C   &kp D   &kp V   &kp BACKSPACE  &kp DEL  &to 2    &to 1  &kp ENTER  &kp SPACE  &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &kp BSLH
&mo MAGIC   &trans  &trans  &trans  &trans          &mo 2          &trans   &trans    &trans  &kp INSERT &mo 1              &trans  &trans     &trans   &trans    &bootloader
)

ZMK_LAYER(lower_layer, &trans      &trans  &trans  &trans  &trans                                                                                  &trans  &trans     &trans   &trans    &trans
&trans      &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans     &trans   &trans    &trans
&kp F1      &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                                                                  &kp F7  &kp F8  &kp F9     &kp F10  &kp F11   &kp F12
&kp EQUAL   &hrm LGUI N1 &hrm LALT N2 &hrm LCTRL N3 &hrm LSHIFT N4  &kp N5       &kp N6  &hrm RSHIFT N7 &hrm RCTRL N8 &hrm RALT N9 &hrm RGUI N0    &kp MINUS
&none   &kp LEFT &kp UP  &kp DOWN &kp RIGHT &none       &trans     &trans   &to 0    &to 2  &trans     &trans     &none   &none   &none      &none    &none     &none
&trans      &trans  &trans  &trans  &trans              &mo 0      &trans   &trans    &trans  &trans     &mo 2              &trans  &trans     &trans   &trans    &trans
)

ZMK_LAYER(magic_layer,
&trans      &trans    &trans    &trans    &trans                                                                              &trans   &trans   &trans    &trans    &trans
&trans      &trans    &trans    &trans    &trans    &trans                                                  &trans          &trans   &trans    &trans    &trans      &trans
&none       &kp LBRC  &kp LBKT  &kp RBKT  &kp RBRC  &none                                                   &kp KP_DIVIDE   &kp KP_N7 &kp KP_N8  &kp KP_N9  &kp KP_MINUS &kp KP_NUMLOCK
&none       &kp LT    &kp LPAR  &kp RPAR  &kp GT    &none                                                   &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &none
&none       &none     &none     &none     &none     &none   &trans     &trans   &to 1    &to 0  &trans    &trans    &kp KP_N0    &kp KP_N1   &kp KP_N2   &kp KP_N3  &kp KP_DOT          &none
&trans      &trans    &trans    &trans    &trans            &mo 1      &trans   &trans    &trans  &trans    &mo 0             &trans   &trans    &trans    &trans    &trans
)
